# -*- coding: utf-8 -*-
"""house price prediction model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CePZdEGz3KPK812bzhhpWPCFl5gzH4wL
"""

#installing dependencies...
import pandas as pd
import seaborn as sns
import numpy as np
import pickle
print('dependencies installed...')

import kagglehub

# Download latest version
path = kagglehub.dataset_download("yasserh/housing-prices-dataset")

print("Path to dataset files:", path)
data = pd.read_csv(f'{path}/Housing.csv')

print('dataset uploaded...')

"""**Data Exploration to understand Data**"""

data.head()

data.tail()

data.columns

data.shape

data.describe()

data.isnull().sum()

"""**Checking relationship between variables -- Data Visualization**"""

data.head()

sns. relplot(x='bedrooms',y='price',data=data)

sns. relplot(x='bathrooms',y='price',data=data)

sns. relplot(x='area',y='price',data=data)

sns. relplot(x='stories',y='price',data=data)

sns.boxplot(data['price'])  # see if price has extreme outliers

"""***Train Model***"""

data.head()

# from sklearn.linear_model import LinearRegression
# from sklearn.model_selection import train_test_split

from sklearn.ensemble import RandomForestRegressor
model = RandomForestRegressor(random_state=42)

# Select features and target
X = data.drop([ 'price'], axis=1)
y = data['price']

# Convert categorical columns to numerical using one-hot encoding
categorical_cols = ['mainroad', 'basement', 'airconditioning', 'prefarea', 'furnishingstatus' , 'guestroom' , 'hotwaterheating']
X = pd.get_dummies(X, columns=categorical_cols, drop_first=True)

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=2)

# Create model instance
model = RandomForestRegressor(random_state=42)

# Train the model
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)



model.fit(X_train,y_train)

pred = model.predict(X_test)

pred

model.score(X,y)

# Save model
with open("model.pkl", "wb") as f:
    pickle.dump(model, f)

print("âœ… Model trained and saved as model.pkl")

print(X_train.columns.tolist())

data.head()

# Define column names in the same order as training
columns = ['area', 'bedrooms', 'bathrooms', 'stories', 'parking',
           'mainroad_yes', 'basement_yes', 'airconditioning_yes', 'prefarea_yes',
           'furnishingstatus_semi-furnished', 'furnishingstatus_unfurnished',
           'guestroom_yes', 'hotwaterheating_yes']

# Sample input
values = [[7420, 4, 2, 3, 2,   # area, bedrooms, bathrooms, stories, parking
          1, 0, 0, 0,         # mainroad_yes, basement_yes, airconditioning_yes, prefarea_yes
          0, 0, 1, 0]]        # furnishingstatus semi/unfurnished, guestroom_yes, hotwaterheating_yes


# Create DataFrame
df_input = pd.DataFrame(values, columns=columns)

# Predict
prediction = model.predict(df_input)
print(f"Predicted price: ${prediction[0]:,.2f}")